{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Todo","todo","index","completeTodo","removeTodo","style","textDecoration","isCompleted","className","text","onClick","TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","type","placeholder","onChange","target","App","todos","setTodos","newTodos","splice","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPAIA,SAASA,EAAT,GAA0D,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,WACzC,OACE,yBAAKC,MAAO,CAACC,eAAgBL,EAAKM,YAAc,eAAiB,IAAKC,UAAU,QAC7EP,EAAKQ,KACN,6BACE,4BAAQC,QAAS,kBAAMP,EAAaD,KAApC,YACA,4BAAQQ,QAAS,kBAAMN,EAAWF,KAAlC,OAOR,SAASS,EAAT,GAA8B,IAAXC,EAAU,EAAVA,QAAU,EACDC,mBAAS,IADR,mBACpBC,EADoB,KACbC,EADa,KAU3B,OACE,0BAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACEJ,IACJF,EAAQE,GACRC,EAAS,OAKP,2BAAOI,KAAK,OAAOX,UAAU,QAAQM,MAAOA,EAAOM,YAAY,aAAaC,SAAU,SAAAJ,GAAC,OAAIF,EAASE,EAAEK,OAAOR,WAqDpGS,MA/Cf,WAAe,MAEaV,mBAAS,CACjC,CACEJ,KAAM,iBACNF,aAAa,GAEf,CACEE,KAAM,gBACNF,aAAa,GAEf,CACEE,KAAM,mBACNF,aAAa,KAbJ,mBAENiB,EAFM,KAECC,EAFD,KAsBPtB,EAAe,SAAAD,GACnB,IAAMwB,EAAQ,YAAOF,GACrBE,EAASxB,GAAOK,aAAc,EAC9BkB,EAASC,IAGLtB,EAAa,SAAAF,GACjB,IAAMwB,EAAQ,YAAOF,GACrBE,EAASC,OAAOzB,EAAO,GACvBuB,EAASC,IAGX,OACE,yBAAKlB,UAAU,OACb,wBAAIA,UAAU,MAAd,wBACA,yBAAKA,UAAU,aACZgB,EAAMI,KAAI,SAAC3B,EAAMC,GAAP,OACT,kBAACF,EAAD,CAAM6B,IAAK3B,EAAOA,MAAOA,EAAOD,KAAMA,EAAME,aAAcA,EAAcC,WAAYA,OAEtF,kBAACO,EAAD,CAAUC,QAxBA,SAAAH,GACd,IAAMiB,EAAQ,sBAAOF,GAAP,CAAc,CAAEf,UAC9BgB,EAASC,SC1COI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4950aa43.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\n// Todo component\nfunction Todo( {todo, index, completeTodo, removeTodo }) {\n  return ( \n    <div style={{textDecoration: todo.isCompleted ? 'line-through' : ''}} className=\"todo\">\n      {todo.text}\n      <div>\n        <button onClick={() => completeTodo(index)}>Complete</button>\n        <button onClick={() => removeTodo(index)}>x</button>\n      </div>\n    </div>\n  )\n}\n\n// Todo Form component\nfunction TodoForm({addTodo}) {\n  const [value, setValue] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if(!value) return;\n    addTodo(value);\n    setValue('');\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" className=\"input\" value={value} placeholder=\"Add Todo..\" onChange={e => setValue(e.target.value)} />\n    </form>\n  )\n}\n\n// App component \nfunction App() {\n  // set initial state using useState Hook\n  const [todos, setTodos] = useState([\n    {\n      text: \"Learn React JS\",\n      isCompleted: false\n    },\n    {\n      text: \"Learn Node JS\",\n      isCompleted: false\n    },\n    {\n      text: \"Learn Express JS\",\n      isCompleted: false\n    }\n  ]);\n\n  const addTodo = text => {\n    const newTodos = [...todos, { text }];\n    setTodos(newTodos);\n  }\n\n  const completeTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = true;\n    setTodos(newTodos);\n  }\n\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  }\n\n  return (\n    <div className=\"app\">\n      <h2 className=\"h2\">React Hooks Todo App</h2>\n      <div className=\"todo-list\">\n        {todos.map((todo, index) => (\n          <Todo key={index} index={index} todo={todo} completeTodo={completeTodo} removeTodo={removeTodo} />\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}